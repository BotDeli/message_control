// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: protoc/message_controller.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageController_PostNewMessage_FullMethodName  = "/MessageController/PostNewMessage"
	MessageController_GetChatMessages_FullMethodName = "/MessageController/GetChatMessages"
	MessageController_GetFriendsList_FullMethodName  = "/MessageController/GetFriendsList"
)

// MessageControllerClient is the client API for MessageController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageControllerClient interface {
	PostNewMessage(ctx context.Context, in *BodyMessage, opts ...grpc.CallOption) (*Response, error)
	GetChatMessages(ctx context.Context, in *Users, opts ...grpc.CallOption) (*ChatUsers, error)
	GetFriendsList(ctx context.Context, in *User, opts ...grpc.CallOption) (*FriendList, error)
}

type messageControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageControllerClient(cc grpc.ClientConnInterface) MessageControllerClient {
	return &messageControllerClient{cc}
}

func (c *messageControllerClient) PostNewMessage(ctx context.Context, in *BodyMessage, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MessageController_PostNewMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageControllerClient) GetChatMessages(ctx context.Context, in *Users, opts ...grpc.CallOption) (*ChatUsers, error) {
	out := new(ChatUsers)
	err := c.cc.Invoke(ctx, MessageController_GetChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageControllerClient) GetFriendsList(ctx context.Context, in *User, opts ...grpc.CallOption) (*FriendList, error) {
	out := new(FriendList)
	err := c.cc.Invoke(ctx, MessageController_GetFriendsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageControllerServer is the server API for MessageController service.
// All implementations must embed UnimplementedMessageControllerServer
// for forward compatibility
type MessageControllerServer interface {
	PostNewMessage(context.Context, *BodyMessage) (*Response, error)
	GetChatMessages(context.Context, *Users) (*ChatUsers, error)
	GetFriendsList(context.Context, *User) (*FriendList, error)
}

// UnimplementedMessageControllerServer must be embedded to have forward compatible implementations.
type UnimplementedMessageControllerServer struct {
}

func (UnimplementedMessageControllerServer) PostNewMessage(context.Context, *BodyMessage) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostNewMessage not implemented")
}
func (UnimplementedMessageControllerServer) GetChatMessages(context.Context, *Users) (*ChatUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatMessages not implemented")
}
func (UnimplementedMessageControllerServer) GetFriendsList(context.Context, *User) (*FriendList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsList not implemented")
}
func (UnimplementedMessageControllerServer) mustEmbedUnimplementedMessageControllerServer() {}

// UnsafeMessageControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageControllerServer will
// result in compilation errors.
type UnsafeMessageControllerServer interface {
	mustEmbedUnimplementedMessageControllerServer()
}

func RegisterMessageControllerServer(s grpc.ServiceRegistrar, srv MessageControllerServer) {
	s.RegisterService(&MessageController_ServiceDesc, srv)
}

func _MessageController_PostNewMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageControllerServer).PostNewMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageController_PostNewMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageControllerServer).PostNewMessage(ctx, req.(*BodyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageController_GetChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Users)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageControllerServer).GetChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageController_GetChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageControllerServer).GetChatMessages(ctx, req.(*Users))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageController_GetFriendsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageControllerServer).GetFriendsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageController_GetFriendsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageControllerServer).GetFriendsList(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageController_ServiceDesc is the grpc.ServiceDesc for MessageController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageController",
	HandlerType: (*MessageControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostNewMessage",
			Handler:    _MessageController_PostNewMessage_Handler,
		},
		{
			MethodName: "GetChatMessages",
			Handler:    _MessageController_GetChatMessages_Handler,
		},
		{
			MethodName: "GetFriendsList",
			Handler:    _MessageController_GetFriendsList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/message_controller.proto",
}
